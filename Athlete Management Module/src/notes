Notes for Athlete Class
Athlete class is used to represent an athlete and serialization of the object using
Serializable interface. That includes serializer.includeSerizialVersionUID; a static
final field serialVersionUID used to ensure that the serialized object can be properly
de-serialized. A number of ANSI color codes are defined by the class as static final
strings, which are used to format console output, such as ANSI_YELLOW, ANSI_CYAN,
and ANSI_RED_BACKGROUND.

The class has several fields:
name, a transient string representing the name of the athlete (without being serialized).

float currentWeight which represents the weight of the athlete in the current bottle.

A WeightCategory instance, weightCategory, that groups the athlete by weight.

An instance of TrainingPlan that holds the athletes training plan...named trainingPlan.

competition, a Competition instance representing the Athlete’s competition, limited to elite and intermediate categories.

PrivateCoaching(0, 5) # an instance of PrivateCoaching that supports a certain number of coaching hours(0…5).

The Athlete class uses the WeightCategory.getCategory(currentWeight) method to determine the athlete’s
weight category and sets then initialized these fields. We can implement the calculateTotalCost() method
to get the total amount the athlete needs to pay by adding together the fees from trainings plan,
competition and private coaching.The getWeightCategory() method is used by us to calculate and to return
a string indicating that the athlete's weight status with regard to their weight category. It checks
if the athlete is near the limit, past the limit, or below the limit, and outputs the format specifying
a special message if the athlete is really over the limit.The displayAthleteInformation(long athleteNumber)
method prints athlete’s information to the console: ID number, name, current weight, training plan, fees,
total cost, weight category, weight status etc, using ANSI color codes to format them.\




this could work?
// Method to load athletes from the file athletes.dat
public static void loadAthletes(List<Athlete> athletes) {
    File fileIn = new File("athletes.dat"); // this is the file path
    if (fileIn.exists()) {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileIn))) {
            Object obj = ois.readObject(); // Read the object from the file
            if (obj instanceof List<?>) {
                List<?> loadedAthletes = (List<?>) obj; // Safely cast to List
                for (Object item : loadedAthletes) {
                    if (item instanceof Athlete) {
                        athletes.add((Athlete) item); // Safe cast to Athlete
                    }
                }
                System.out.println(ANSI_BLUE + "Athletes loaded successfully." + ANSI_RESET);
            } else {
                System.out.println(ANSI_RED + "Error: File does not contain a list of athletes." + ANSI_RESET);
            }
        } catch (IOException | ClassNotFoundException e) {
            System.out.println(ANSI_RED + "Error loading athletes: " + e.getMessage() + ANSI_RESET);
        }
    }
}

Object verification We first read the object from the file and check if it’s an instance of List<?>. This ensures that the file indeed contains a list.

Type checking Each element of the list is then checked if it is an instance of Athlete. This avoids potential ClassCastException.

Safe casting After verification, we safely cast the objects to Athlete and add them to the list.